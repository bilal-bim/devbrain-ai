version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: devbrainai-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: devbrainai
      POSTGRES_USER: devbrainai
      POSTGRES_PASSWORD: devbrainai123
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docs/architecture/database-schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U devbrainai -d devbrainai"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - devbrainai-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: devbrainai-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass "redis123"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - devbrainai-network

  # DevbrainAI Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: devbrainai-backend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      # Database Configuration
      DATABASE_URL: "postgresql://devbrainai:devbrainai123@postgres:5432/devbrainai"
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: devbrainai
      DB_PASSWORD: devbrainai123
      DB_NAME: devbrainai
      DB_SYNC: "false"
      DB_LOGGING: "true"

      # Redis Configuration  
      REDIS_URL: "redis://:redis123@redis:6379"
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: "redis123"
      REDIS_DB: 0

      # Application Configuration
      NODE_ENV: production
      PORT: 3000
      API_PREFIX: api
      FRONTEND_URL: "http://localhost:3001"
      CORS_ORIGINS: "http://localhost:3001,http://localhost:3000"

      # JWT Configuration
      JWT_SECRET: "your-super-secret-jwt-key-change-this-in-production"
      JWT_EXPIRATION_TIME: "7d"
      JWT_REFRESH_SECRET: "your-refresh-secret-change-this-too"
      JWT_REFRESH_EXPIRATION_TIME: "30d"

      # AI Services (Configure with your actual keys)
      CLAUDE_API_KEY: "${CLAUDE_API_KEY:-your-claude-api-key}"
      CLAUDE_API_URL: "https://api.anthropic.com"

      # Rate Limiting
      RATE_LIMIT_TTL: 60
      RATE_LIMIT_MAX: 100

      # Logging
      LOG_LEVEL: "info"

      # WebSocket
      WEBSOCKET_CORS_ORIGIN: "http://localhost:3001"

      # Queue Configuration
      BULL_REDIS_HOST: redis
      BULL_REDIS_PORT: 6379
      BULL_REDIS_DB: 1
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - devbrainai-network

  # Admin tools (optional)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: devbrainai-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@devbrainai.local
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: "False"
    ports:
      - "8080:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - devbrainai-network
    profiles:
      - admin

  redis-commander:
    image: ghcr.io/joeferner/redis-commander:latest
    container_name: devbrainai-redis-commander
    restart: unless-stopped
    environment:
      REDIS_HOSTS: "local:redis:6379:1:redis123"
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - devbrainai-network
    profiles:
      - admin

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  devbrainai-network:
    driver: bridge